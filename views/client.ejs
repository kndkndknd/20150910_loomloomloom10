<!DOCTYPE html>
<html lang="ja">
<head>
  <link rel="stylesheet" type="text/css" href="/css/client.css" media="all">
  <title><%= title %></title>
</head>
<body id="body">
  <script src="/socket.io/socket.io.js"></script>
  <script src="/javascripts/three.js"></script>
  <script src="/javascripts/OrbitControls.js"></script>
  <script src="/javascripts/TDSLoader.js"></script>
  <script src="javascripts/clmtrackr.js"></script>
  <!-- <script async src="javascripts/opencv.js" type="text/javascript"></script> -->
  <script>
    /*
      // ページの読み込みを待つ
        console.log("debuging");
      window.addEventListener('load', init);

      function init() {
        console.log("debug");
        // サイズを指定
        const width = 960;
        const height = 540;

        // レンダラーを作成
        const renderer = new THREE.WebGLRenderer({
          canvas: document.querySelector('#three')
        });
        //renderer.setPixelRatio(window.devicePixelRatio);
        console.log(width);
        renderer.setSize(width, height);

        // シーンを作成
        const scene = new THREE.Scene();

        // カメラを作成
        const camera = new THREE.PerspectiveCamera(
          45,
          width / height,
          0.1,
          10000
        );
        // カメラの初期座標を設定
        camera.position.set(0, 0, 5);

        // カメラコントローラーを作成
        const controls = new THREE.OrbitControls(camera, renderer.domElement);

        // 平行光源を作成
        const directionalLight = new THREE.DirectionalLight(0xffffff);
        directionalLight.position.set(1, 1, 1);
        scene.add(directionalLight);
        // 環境光を追加
        const ambientLight = new THREE.AmbientLight(0xffffff);
        scene.add(ambientLight);

        // 3DS形式のモデルデータを読み込む
        const loader = new THREE.TDSLoader();
        // テクスチャーのパスを指定
        loader.setPath('files/textures/');
        // 3dsファイルのパスを指定
        loader.load('files/portalgun.3ds', object => {
          // 読み込み後に3D空間に追加
          scene.add(object);
        });

        tick();
        // 毎フレーム時に実行されるループイベントです
        function tick() {
          // レンダリング
          renderer.render(scene, camera);
          requestAnimationFrame(tick);
        }
      }
      */
  </script>
  <div id="wrapper">
    <video id="video" style="display:none;"></video>
  <canvas id="cnvs">
    canvas not applied.
  </canvas>
  <canvas id="strCnvs">
    canvas not applied.
  </canvas>
  <canvas id="bckCnvs">
    canvas not applied.
  </canvas>
  <canvas id="three">
    canvas not applied.
  </canvas>
  </div>
  <script type="text/javascript">
  var socket = io.connect();
  var client = "<%= title %>";
  //var mode = "none"; //"osc" or "feedback" or "whitenoise"
  </script>
  <script src="/javascripts/client.js"></script>
</body>
</html>
